// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id        String      @id @unique @default(cuid())
  name      String      @unique
  recipes   RecipeTag[]
  recipesCount Int
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @updatedAt @map(name: "updated_at")
}

model Category {
  id        String           @id @unique @default(cuid())
  name      String           @unique
  recipes   RecipeCategory[]
  recipesCount Int
  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @updatedAt @map(name: "updated_at")
}

model Recipe {
  id          String           @id @unique @default(cuid())
  name        String           @unique
  description String
  images      String[]
  ingredients Json
  instruction String[]
  prepTime    Int?
  cookTime    Int
  cuisine     String
  serves      String
  notes       String[]
  rating      Int?
  tags        RecipeTag[]
  category    RecipeCategory[]
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now()) @map(name: "created_at")
  updatedAt   DateTime         @updatedAt @map(name: "updated_at")
}

//many to many realtions for the tags-recipe category-recipe

model RecipeTag {
  recipeId String
  tagId    String

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([recipeId, tagId])
}

model RecipeCategory {
  recipeId   String
  categoryId String

  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([recipeId, categoryId])
}

enum Status{
  READ
  UNREAD
}

model contactUs {
  id        String   @id @unique @default(cuid())
  name      String
  email     String
  message   String
  status    Status   @default(UNREAD)
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model aboutUs {
  id          String   @id @unique @default(uuid())
  name        String
  authorInfo  String
  img         String
  websiteInfo String[]
  social      String[]
}

model admin {
  id            String   @id @unique @default(uuid())
  name          String
  email         String   @unique
  password      String
  createdBy     admin?   @relation("AdminCreatedBy", fields: [createdById], references: [id])
  createdById   String? // Optional Foreign Key
  createdAdmins admin[]  @relation("AdminCreatedBy")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
}

model ResetPasswordToken {
  tokenId     String   @id @unique @default(uuid()) @map("id")
  email       String   @unique
  token       String
  tokenExpiry DateTime
}
